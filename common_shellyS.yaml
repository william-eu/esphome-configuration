
esp8266:
  board: ${board}

binary_sensor:
  - platform: gpio
    internal: true
    pin:
      number: GPIO13
      inverted: True
    name: "${devicename}_button"
    on_press:
      - switch.toggle: relay

output:
  - platform: gpio
    pin: GPIO00
    inverted: true
    id: red_led_output
  - platform: gpio
    pin: GPIO02
    inverted: true
    id: blue_led_output

light:
  - platform: binary
    id: red_light
    output: red_led_output
    restore_mode: RESTORE_DEFAULT_OFF
    internal: true
    effects:
      - strobe:
          name: pulse 20%
          colors:
          - state: True
            duration: 0.1s
          - state: false
            duration: 4.9s
      - strobe:
          name: pulse 40%
          colors:
          - state: True
            duration: 0.1s
          - state: false
            duration: 3.9s
      - strobe:
          name: pulse 60%
          colors:
          - state: True
            duration: 0.1s
          - state: false
            duration: 2.9s
      - strobe:
          name: pulse 80%
          colors:
          - state: True
            duration: 0.1s
          - state: false
            duration: 1.9s
      - strobe:
          name: pulse 100%
          colors:
          - state: True
            duration: 0.1s
          - state: false
            duration: 0.9s

switch:
  - platform: gpio
    pin: GPIO15
    id: relay
    name: "${channel_1}"
    on_turn_on:
      - output.turn_on: blue_led_output
    on_turn_off:
      - output.turn_off: blue_led_output

sensor:
  - platform: wifi_signal
    name: "${devicename} WiFi Signal"
    update_interval: 300s

  # NTC Temperature
  - platform: ntc
    sensor: temp_resistance_reading
    internal: true
    name: ${devicename} temperature
    unit_of_measurement: "°C"
    accuracy_decimals: 1
    icon: "mdi:thermometer"
    calibration:
      b_constant: 3350
      reference_resistance: 10kOhm
      reference_temperature: 298.15K
    on_value_range:
      - above: ${max_temp}
        then:
          - switch.turn_off: relay
          - homeassistant.service:
              service: persistent_notification.create
              data:
                title: Message from ${devicename}
              data_template:
                message: Switch turned off because temperature exceeded ${max_temp}°C
  - platform: resistance
    id: temp_resistance_reading
    internal: true
    sensor: temp_analog_reading
    configuration: DOWNSTREAM
    resistor: 32kOhm
  - platform: adc
    id: temp_analog_reading
    pin: A0

  - platform: hlw8012
    model: BL0937
    sel_pin:
      number: GPIO12
      inverted: true
    cf_pin: GPIO05
    cf1_pin: GPIO14
    current_resistor: ${current_res}
    voltage_divider: ${voltage_div}
    current:
      name: "${channel_1} current"
      internal: true
      unit_of_measurement: "A"
      accuracy_decimals: 3
      icon: mdi:flash-outline
    voltage:
      name: "${channel_1} voltage"
      internal: true
      unit_of_measurement: "V"
      icon: mdi:flash-outline
    power:
      name: "${channel_1} power"
      id: power
      unit_of_measurement: "W"
      filters:
        - calibrate_linear:
          - 0.0 -> 0.0
          - ${power_cal_meas} -> ${power_cal_real}
      icon: mdi:flash-outline
      on_value_range:
        - below: 1
          then:
            - light.turn_off: red_light
        - below: ${quintile12}
          above: 1
          then:
            - light.turn_on:
                id: red_light
                effect: pulse 20%
        - below: ${quintile23}
          above: ${quintile12}
          then:
            - light.turn_on:
                id: red_light
                effect: pulse 40%
        - below: ${quintile34}
          above: ${quintile23}
          then:
            - light.turn_on:
                id: red_light
                effect: pulse 60%
        - below: ${quintile45}
          above: ${quintile34}
          then:
            - light.turn_on:
                id: red_light
                effect: pulse 80%
        - above: ${quintile45}
          then:
            - light.turn_on:
                id: red_light
                effect: pulse 100%
        - above: ${max_power}
          then:
            - switch.turn_off: relay
            - homeassistant.service:
                service: persistent_notification.create
                data:
                  title: Message from ${devicename}
                data_template:
                  message: Switch turned off because power exceeded ${max_power}W
    update_interval: 2s

  - platform: total_daily_energy
    name: "${channel_1} daily energy"
    power_id: power
    filters:
      # Multiplication factor from W to kW is 0.001
      - multiply: 0.001
    unit_of_measurement: kWh

